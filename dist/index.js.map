{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import \"@k2oss/k2-broker-core\";\r\n\r\nmetadata = {\r\n  systemName: \"GenerateDocument\",\r\n  displayName: \"Generate Document\",\r\n  description: \"Service to generate document\",\r\n  configuration: {\r\n    mbh: {\r\n      displayName: \"MBH Workflow\",\r\n      type: \"string\",\r\n    },\r\n    anotherWorkflow: {\r\n      displayName: \"Another Workflow\",\r\n      type: \"string\",\r\n    },\r\n    ServiceKey: {\r\n      displayName: \"Service Key for document generation\",\r\n      type: \"number\",\r\n      required: true,\r\n      value: \"1\",\r\n    },\r\n    stringFormat: {\r\n            displayName: \"String Format\",\r\n            type: \"string\",\r\n            value: \"Alphanumeric\"\r\n    }\r\n  },\r\n};\r\n\r\nondescribe = async function ({ configuration }): Promise<void> {\r\n  const documentType = configuration[\"documentType\"] ? configuration[\"documentType\"].toString() : \"pdf\";\r\n\r\n  postSchema({\r\n    objects: {\r\n      document: {\r\n        displayName: \"Document\",\r\n        description: \"Manages document generation\",\r\n        properties: {\r\n          id: {\r\n            displayName: \"ID\",\r\n            type: \"number\",\r\n          },\r\n          name: {\r\n            displayName: \"Name\",\r\n            type: \"string\",\r\n          },\r\n          type: {\r\n            displayName: \"Type\",\r\n            type: \"string\",\r\n          },\r\n          base64Data: {\r\n            displayName: \"Base64 Data\",\r\n            type: \"string\",\r\n          },\r\n          jsonData1: {\r\n            displayName: \"JSON Data 1\",\r\n            type: \"string\",\r\n          },\r\n          jsonData2: {\r\n            displayName: \"JSON Data 2\",\r\n            type: \"string\",\r\n          },\r\n          jsonData3: {\r\n            displayName: \"JSON Data 3\",\r\n            type: \"string\",\r\n          },\r\n          jsonData4: {\r\n            displayName: \"JSON Data 4\",\r\n            type: \"string\",\r\n          },\r\n          documentType: {\r\n            displayName: \"Document Type\",\r\n            type: \"string\",\r\n          },\r\n        },\r\n        methods: {\r\n          generate: {\r\n            displayName: \"Generate Document\",\r\n            type: \"execute\",\r\n            inputs: [\"id\", \"name\", \"type\", \"base64Data\", \"jsonData1\", \"jsonData2\", \"jsonData3\", \"jsonData4\", \"documentType\"],\r\n            outputs: [\"jsonResult\"],\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n};\r\n\r\nonexecute = async function ({\r\n  objectName,\r\n  methodName,\r\n  parameters,\r\n  properties,\r\n  configuration,\r\n  schema,\r\n}): Promise<void> {\r\n  switch (objectName) {\r\n    case \"document\":\r\n      await onexecuteDocument(methodName, properties, parameters, configuration);\r\n      break;\r\n    default:\r\n      throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n  }\r\n};\r\n\r\nasync function onexecuteDocument(\r\n  methodName: string,\r\n  properties: SingleRecord,\r\n  parameters: SingleRecord,\r\n  configuration: SingleRecord\r\n): Promise<void> {\r\n  switch (methodName) {\r\n    case \"generate\":\r\n      await onexecuteGenerateDocument(properties, configuration);\r\n      break;\r\n    default:\r\n      throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n  }\r\n}\r\n\r\nasync function onexecuteGenerateDocument(\r\n  properties: SingleRecord,\r\n  configuration: SingleRecord\r\n): Promise<void> {\r\n  try {\r\n    const workflowType = properties[\"type\"].toString(); \r\n    const documentType = properties[\"documentType\"].toString(); \r\n    const jsonResult = await buildJsonRequest(properties, workflowType, documentType);\r\n\r\n    postResult({\r\n      jsonResult: JSON.stringify(jsonResult),\r\n    });\r\n  } catch (error) {\r\n    throw new Error(\"Error generating document: \" + error.message);\r\n  }\r\n}\r\n\r\nfunction buildJsonRequest(properties: SingleRecord, workflowType: string, documentType: string): Promise<any> {\r\n  switch (workflowType) {\r\n    case \"mbh\":\r\n      return buildMbhJson(properties, documentType);\r\n    case \"anotherWorkflow\":\r\n      return Promise.resolve({ message: \"Another workflow not implemented yet.\" });\r\n    default:\r\n      return Promise.reject(new Error(\"Unsupported workflow type: \" + workflowType));\r\n  }\r\n}\r\n\r\nfunction buildMbhJson(properties: SingleRecord, documentType: string): Promise<any> {\r\n  return new Promise<any>((resolve, reject) => {\r\n    try {\r\n      const payload1 = JSON.parse(properties[\"jsonData1\"].toString());\r\n      const payload2 = JSON.parse(properties[\"jsonData2\"].toString());\r\n      const payload3 = JSON.parse(properties[\"jsonData3\"].toString());\r\n      const payload4 = JSON.parse(properties[\"jsonData4\"].toString());\r\n\r\n      const action_plan = payload2.value;\r\n      const history = payload3.value;\r\n      const document_attach = payload4.value;\r\n\r\n      console.log(\"document_attach\", document_attach);\r\n      const documentMap = document_attach.reduce((map, document) => {\r\n        map[document.NCR_ID] = document[\"File@odata.mediaReadLink\"];\r\n        return map;\r\n      }, {});\r\n\r\n      const tableDataPlan = action_plan.map((action) => ({\r\n        plan_A: action.MBH_NCR_Description || \"\",\r\n        plan_B: action.MBH_NCR_ActionPICEmail || \"\",\r\n        plan_C: action.MBH_NCR_PlanDate.substring(0, 10) || \"\",\r\n        plan_D: action.MBH_NCR_Response || \"\",\r\n        plan_E: action.MBH_NCR_ExectionDate.substring(0, 10) || \"\",\r\n        plan_F: documentMap[action.MBH_NCR_NCRID_fk] || \"\",\r\n      }));\r\n\r\n      const tableDataAction = action_plan.map((resume) => ({\r\n        resume_A: resume.MBH_NCR_Description || \"\",\r\n        resume_B: resume.MBH_NCR_PlanDate.substring(0, 10) || \"\",\r\n        resume_C: resume.MBH_NCR_ActionPlanApprovalStatusByQuality || \"\",\r\n        resume_D: resume.MBH_NCR_ActionPlanApprovalStatusByClient || \"\",\r\n        resume_E: resume.MBH_NCR_ActionResponseApprovalStatusByPlanPIC === \"Oui\" ? \"Satisfaisant\" : \"\",\r\n        resume_F: resume.MBH_NCR_ActionResponseApprovalStatusByClient || \"\",\r\n      }));\r\n\r\n      const tableDataHistory = history.map((history) => ({\r\n        historique_A: history.ODataProperty__GCPC_NCR_PICEmail || \"\",\r\n        historique_B: history.GCPC_NCR_ResponseDate.substring(0, 10) || \"\",\r\n        historique_C: history.GCPC_NCR_Step || \"\",\r\n        historique_D: history.GCPC_NCR_Comment || \"\",\r\n      }));\r\n\r\n      const tableDataAttachdocument = document_attach.map((document) => ({\r\n        doc_A: document.FileName || \"\",\r\n        doc_B: document.FileDescription || \"\",\r\n        doc_C: document.Comment || \"\",\r\n        doc_D: document.UploadedBy || \"\",\r\n        doc_E: document.Upload_Date.substring(0, 10) || \"\",\r\n        doc_F: document.FileName || \"\",\r\n        doc_G: document[\"File@odata.mediaReadLink\"] || \"\",\r\n        doc_H: document.Step || \"\",\r\n      }));\r\n\r\n      console.log(\"payload1\", payload1);\r\n\r\n      const jsonObject = {\r\n        instance_A: payload1.UCI || \"\",\r\n        instance_B: \"MBH NCR\",\r\n        instance_C: payload1.NCRStatus || \"\",\r\n        instance_D: payload1.InitiatorName || \"\",\r\n        instance_E: payload1.InitiatorEmail || \"\",\r\n        instance_F: payload1.NCRRequestDate.substring(0, 10) || \"\",\r\n        info_A: payload1.NCRLot || \"\",\r\n        info_B: payload1.NCRProjectNumber || \"\",\r\n        info_C: payload1.ProjectTitle || \"\",\r\n        info_D: payload1.NCRContractTitle || \"\",\r\n        info_E: payload1.NCRContractNumber || \"\",\r\n        info_F: payload1.STMDesignRepresentative || \"\",\r\n        info_G: payload1.RepresentativeAdjudicateur || \"\",\r\n        info_H: payload1.NCRIssuer || \"\",\r\n        info_I: payload1.NCRSector || \"\",\r\n        info_J: payload1.NCRWBS || \"\",\r\n        info_K: payload1.NCRDiscipline || \"\",\r\n        info_L: payload1.MBH_NCR_For || \"\",\r\n        info_M: payload1.MBH_NCR_Activity || \"\",\r\n        info_N: payload1.MBH_NCR_IsSubcontractor || \"\",\r\n        info_O: payload1.MBH_NCR_SousActivity || \"\",\r\n        info_Q: payload1.WBSTEXT || \"\",\r\n        ref_chantier_pie: payload1.MBH_NCR_Reference || \"\",\r\n        categorie_nc: payload1.NCRCategory || \"\",\r\n        titre: payload1.NCRTitle || \"\",\r\n        date: payload1.NCRDate.substring(0, 10) || \"\",\r\n        autre_ref: payload1.NCROtherReference || \"\",\r\n        date_reponse: payload1.NCRResponseRequiredBy.substring(0, 10) || \"\",\r\n        type_nc: payload1.MBH_NCR_Type || \"\",\r\n        sous_type_nc: payload1.MBH_NCR_SubType || \"\",\r\n        description: payload1.NCRDescription || \"\",\r\n        gerant_projet: payload1.MBH_NCR_ProjectManagerEmail || \"\",\r\n        impact: payload1.MBH_NCR_ImpactPlanAsBuilt || \"\",\r\n        tables: [\r\n          { anchor: \"plan_A\", data: tableDataPlan },\r\n          { anchor: \"resume_A\", data: tableDataAction },\r\n          { anchor: \"doc_A\", data: tableDataAttachdocument },\r\n          { anchor: \"historique_A\", data: tableDataHistory },\r\n        ],\r\n        outputName: documentType === \"pdf\" ? \"MBH_NCR_RNC_Main_Form.pdf\" : \"MBH_NCR_RNC_Main_Form.docx\",\r\n        base64File: properties[\"base64Data\"].toString(),\r\n      };\r\n\r\n      console.log(\"jsonobject\", jsonObject);\r\n\r\n      resolve(jsonObject);\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}"],"names":["configuration","objectName","methodName","parameters","properties","schema","onexecuteDocument","onexecuteGenerateDocument","workflowType","documentType","jsonResult","buildJsonRequest","error","buildMbhJson","resolve","reject","payload1","payload2","payload3","payload4","action_plan","history","document_attach","documentMap","map","document","tableDataPlan","action","tableDataAction","resume","tableDataHistory","tableDataAttachdocument","jsonObject"],"mappings":"AAEA,WAAW;AAAA,EACT,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,aAAa;AAAA,EACb,eAAe;AAAA,IACb,KAAK;AAAA,MACH,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA,iBAAiB;AAAA,MACf,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA,YAAY;AAAA,MACV,aAAa;AAAA,MACb,MAAM;AAAA,MACN,UAAU;AAAA,MACV,OAAO;AAAA,IACT;AAAA,IACA,cAAc;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,MACN,OAAO;AAAA,IAAA;AAAA,EACf;AAEJ;AAEA,aAAa,eAAgB,EAAE,eAAAA,KAAgC;AACxC,EAAAA,EAAc,gBAAkBA,EAAc,aAAgB,YAExE,WAAA;AAAA,IACT,SAAS;AAAA,MACP,UAAU;AAAA,QACR,aAAa;AAAA,QACb,aAAa;AAAA,QACb,YAAY;AAAA,UACV,IAAI;AAAA,YACF,aAAa;AAAA,YACb,MAAM;AAAA,UACR;AAAA,UACA,MAAM;AAAA,YACJ,aAAa;AAAA,YACb,MAAM;AAAA,UACR;AAAA,UACA,MAAM;AAAA,YACJ,aAAa;AAAA,YACb,MAAM;AAAA,UACR;AAAA,UACA,YAAY;AAAA,YACV,aAAa;AAAA,YACb,MAAM;AAAA,UACR;AAAA,UACA,WAAW;AAAA,YACT,aAAa;AAAA,YACb,MAAM;AAAA,UACR;AAAA,UACA,WAAW;AAAA,YACT,aAAa;AAAA,YACb,MAAM;AAAA,UACR;AAAA,UACA,WAAW;AAAA,YACT,aAAa;AAAA,YACb,MAAM;AAAA,UACR;AAAA,UACA,WAAW;AAAA,YACT,aAAa;AAAA,YACb,MAAM;AAAA,UACR;AAAA,UACA,cAAc;AAAA,YACZ,aAAa;AAAA,YACb,MAAM;AAAA,UAAA;AAAA,QAEV;AAAA,QACA,SAAS;AAAA,UACP,UAAU;AAAA,YACR,aAAa;AAAA,YACb,MAAM;AAAA,YACN,QAAQ,CAAC,MAAM,QAAQ,QAAQ,cAAc,aAAa,aAAa,aAAa,aAAa,cAAc;AAAA,YAC/G,SAAS,CAAC,YAAY;AAAA,UAAA;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAAA,EACF,CACD;AACH;AAEA,YAAY,eAAgB;AAAA,EAC1B,YAAAC;AAAA,EACA,YAAAC;AAAA,EACA,YAAAC;AAAA,EACA,YAAAC;AAAA,EACA,eAAAJ;AAAA,EACA,QAAAK;AACF,GAAkB;AAChB,UAAQJ,GAAY;AAAA,IAClB,KAAK;AACH,YAAMK,EAAkBJ,GAAYE,CAAqC;AACzE;AAAA,IACF;AACE,YAAM,IAAI,MAAM,gBAAgBH,IAAa,oBAAoB;AAAA,EAAA;AAEvE;AAEA,eAAeK,EACbJ,GACAE,GACAD,GACAH,GACe;AACf,UAAQE,GAAY;AAAA,IAClB,KAAK;AACG,YAAAK,EAA0BH,CAAyB;AACzD;AAAA,IACF;AACE,YAAM,IAAI,MAAM,gBAAgBF,IAAa,oBAAoB;AAAA,EAAA;AAEvE;AAEA,eAAeK,EACbH,GACAJ,GACe;AACX,MAAA;AACF,UAAMQ,IAAeJ,EAAW,KAAQ,SAAS,GAC3CK,IAAeL,EAAW,aAAgB,SAAS,GACnDM,IAAa,MAAMC,EAAiBP,GAAYI,GAAcC,CAAY;AAErE,eAAA;AAAA,MACT,YAAY,KAAK,UAAUC,CAAU;AAAA,IAAA,CACtC;AAAA,WACME,GAAO;AACd,UAAM,IAAI,MAAM,gCAAgCA,EAAM,OAAO;AAAA,EAAA;AAEjE;AAEA,SAASD,EAAiBP,GAA0BI,GAAsBC,GAAoC;AAC5G,UAAQD,GAAc;AAAA,IACpB,KAAK;AACI,aAAAK,EAAaT,GAAYK,CAAY;AAAA,IAC9C,KAAK;AACH,aAAO,QAAQ,QAAQ,EAAE,SAAS,yCAAyC;AAAA,IAC7E;AACE,aAAO,QAAQ,OAAO,IAAI,MAAM,gCAAgCD,CAAY,CAAC;AAAA,EAAA;AAEnF;AAEA,SAASK,EAAaT,GAA0BK,GAAoC;AAClF,SAAO,IAAI,QAAa,CAACK,GAASC,MAAW;AACvC,QAAA;AACF,YAAMC,IAAW,KAAK,MAAMZ,EAAW,UAAa,UAAU,GACxDa,IAAW,KAAK,MAAMb,EAAW,UAAa,UAAU,GACxDc,IAAW,KAAK,MAAMd,EAAW,UAAa,UAAU,GACxDe,IAAW,KAAK,MAAMf,EAAW,UAAa,UAAU,GAExDgB,IAAcH,EAAS,OACvBI,IAAUH,EAAS,OACnBI,IAAkBH,EAAS;AAEzB,cAAA,IAAI,mBAAmBG,CAAe;AAC9C,YAAMC,IAAcD,EAAgB,OAAO,CAACE,GAAKC,OAC/CD,EAAIC,EAAS,MAAM,IAAIA,EAAS,0BAA0B,GACnDD,IACN,EAAE,GAECE,IAAgBN,EAAY,IAAI,CAACO,OAAY;AAAA,QACjD,QAAQA,EAAO,uBAAuB;AAAA,QACtC,QAAQA,EAAO,0BAA0B;AAAA,QACzC,QAAQA,EAAO,iBAAiB,UAAU,GAAG,EAAE,KAAK;AAAA,QACpD,QAAQA,EAAO,oBAAoB;AAAA,QACnC,QAAQA,EAAO,qBAAqB,UAAU,GAAG,EAAE,KAAK;AAAA,QACxD,QAAQJ,EAAYI,EAAO,gBAAgB,KAAK;AAAA,MAAA,EAChD,GAEIC,IAAkBR,EAAY,IAAI,CAACS,OAAY;AAAA,QACnD,UAAUA,EAAO,uBAAuB;AAAA,QACxC,UAAUA,EAAO,iBAAiB,UAAU,GAAG,EAAE,KAAK;AAAA,QACtD,UAAUA,EAAO,6CAA6C;AAAA,QAC9D,UAAUA,EAAO,4CAA4C;AAAA,QAC7D,UAAUA,EAAO,kDAAkD,QAAQ,iBAAiB;AAAA,QAC5F,UAAUA,EAAO,gDAAgD;AAAA,MAAA,EACjE,GAEIC,IAAmBT,EAAQ,IAAI,CAACA,OAAa;AAAA,QACjD,cAAcA,EAAQ,oCAAoC;AAAA,QAC1D,cAAcA,EAAQ,sBAAsB,UAAU,GAAG,EAAE,KAAK;AAAA,QAChE,cAAcA,EAAQ,iBAAiB;AAAA,QACvC,cAAcA,EAAQ,oBAAoB;AAAA,MAAA,EAC1C,GAEIU,IAA0BT,EAAgB,IAAI,CAACG,OAAc;AAAA,QACjE,OAAOA,EAAS,YAAY;AAAA,QAC5B,OAAOA,EAAS,mBAAmB;AAAA,QACnC,OAAOA,EAAS,WAAW;AAAA,QAC3B,OAAOA,EAAS,cAAc;AAAA,QAC9B,OAAOA,EAAS,YAAY,UAAU,GAAG,EAAE,KAAK;AAAA,QAChD,OAAOA,EAAS,YAAY;AAAA,QAC5B,OAAOA,EAAS,0BAA0B,KAAK;AAAA,QAC/C,OAAOA,EAAS,QAAQ;AAAA,MAAA,EACxB;AAEM,cAAA,IAAI,YAAYT,CAAQ;AAEhC,YAAMgB,IAAa;AAAA,QACjB,YAAYhB,EAAS,OAAO;AAAA,QAC5B,YAAY;AAAA,QACZ,YAAYA,EAAS,aAAa;AAAA,QAClC,YAAYA,EAAS,iBAAiB;AAAA,QACtC,YAAYA,EAAS,kBAAkB;AAAA,QACvC,YAAYA,EAAS,eAAe,UAAU,GAAG,EAAE,KAAK;AAAA,QACxD,QAAQA,EAAS,UAAU;AAAA,QAC3B,QAAQA,EAAS,oBAAoB;AAAA,QACrC,QAAQA,EAAS,gBAAgB;AAAA,QACjC,QAAQA,EAAS,oBAAoB;AAAA,QACrC,QAAQA,EAAS,qBAAqB;AAAA,QACtC,QAAQA,EAAS,2BAA2B;AAAA,QAC5C,QAAQA,EAAS,8BAA8B;AAAA,QAC/C,QAAQA,EAAS,aAAa;AAAA,QAC9B,QAAQA,EAAS,aAAa;AAAA,QAC9B,QAAQA,EAAS,UAAU;AAAA,QAC3B,QAAQA,EAAS,iBAAiB;AAAA,QAClC,QAAQA,EAAS,eAAe;AAAA,QAChC,QAAQA,EAAS,oBAAoB;AAAA,QACrC,QAAQA,EAAS,2BAA2B;AAAA,QAC5C,QAAQA,EAAS,wBAAwB;AAAA,QACzC,QAAQA,EAAS,WAAW;AAAA,QAC5B,kBAAkBA,EAAS,qBAAqB;AAAA,QAChD,cAAcA,EAAS,eAAe;AAAA,QACtC,OAAOA,EAAS,YAAY;AAAA,QAC5B,MAAMA,EAAS,QAAQ,UAAU,GAAG,EAAE,KAAK;AAAA,QAC3C,WAAWA,EAAS,qBAAqB;AAAA,QACzC,cAAcA,EAAS,sBAAsB,UAAU,GAAG,EAAE,KAAK;AAAA,QACjE,SAASA,EAAS,gBAAgB;AAAA,QAClC,cAAcA,EAAS,mBAAmB;AAAA,QAC1C,aAAaA,EAAS,kBAAkB;AAAA,QACxC,eAAeA,EAAS,+BAA+B;AAAA,QACvD,QAAQA,EAAS,6BAA6B;AAAA,QAC9C,QAAQ;AAAA,UACN,EAAE,QAAQ,UAAU,MAAMU,EAAc;AAAA,UACxC,EAAE,QAAQ,YAAY,MAAME,EAAgB;AAAA,UAC5C,EAAE,QAAQ,SAAS,MAAMG,EAAwB;AAAA,UACjD,EAAE,QAAQ,gBAAgB,MAAMD,EAAiB;AAAA,QACnD;AAAA,QACA,YAAYrB,MAAiB,QAAQ,8BAA8B;AAAA,QACnE,YAAYL,EAAW,WAAc,SAAS;AAAA,MAChD;AAEQ,cAAA,IAAI,cAAc4B,CAAU,GAEpClB,EAAQkB,CAAU;AAAA,aACX,GAAG;AACV,MAAAjB,EAAO,CAAC;AAAA,IAAA;AAAA,EACV,CACD;AACH;"}